@using Microsoft.AspNetCore.Components.Forms;
@using AI050LabAlternate.Components;
@rendermode InteractiveServer


<h1>Lab 01 Emulator</h1>


<hr />

<EditForm Model="@LabModel"
          OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
          OnValidSubmit="(async () => await HandleSubmitAsync(true))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid form-group">
        <div class="row">

            <div class="col-6 d-flex flex-column align-col ">
                <h3>Asisstant Setup</h3>
                <div class="row">
                    <label>
                        System Message:
                        <InputTextArea @bind-Value="LabModel.SystemMessage" class="form-control" />

                    </label>
                </div>



                @for (int i = 0; i < LabModel.Examples.Count; i++)
                {
                <Example ExampleModel="LabModel.Examples[i]" Index="i+1" />
                }
                <div class="d-flex justify-content-md-center">
                    <button type="Button" class="btn btn-primary" @onclick="HandleAddExample">Add Example</button>
                    <button type="button" class="btn btn-primary" @onclick="HandleRemoveExample">Remove Example</button>
                </div>

            </div>
            <div class="col-6 d-flex flex-column">
                <div class="row input-group mb-3">
                    <h3>Parameters</h3>
                    <label>
                        Temperature:
                        <InputNumber @bind-Value="LabModel.Temperature" class="form-control" />


                    </label>

                    <label>
                        MaxResponses:
                        <InputNumber @bind-Value="LabModel.MaxResponses" class="form-control" />


                    </label>
                </div>

                <h3>Chat Session</h3>
                <div class="row">
                    <label>
                        Query Message:
                        <InputTextArea @bind-Value="LabModel.QueryMessage" class="form-control" rows="7" />


                    </label>
                </div>


                <div class="d-flex justify-content-md-center">
                    <button type="submit" class="btn btn-primary" disabled="@Busy">Send</button>
                    <button type="reset" class="btn btn-primary">Clear Chat</button>
                </div>
            </div>



            <div class="row">
                <div class="col-12">
                    <h3>Response</h3>
                    <div class="row">
                        <label>
                            Response Message:
                            <InputTextArea @bind-Value="LabModel.ResponseMessage" class="form-control" rows="7" />


                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
// Let parent handle result of validation.
[Parameter]
public EventCallback<bool> ValidationResult { get; set; }



// The Lab Model to upsert.
[Parameter]
public Lab01Model? LabModel { get; set; }


// Prevent multiple asynchronous operations at the same time.
[Parameter]
public bool Busy { get; set; }


// Handle form submission request.
// isValid: True when field validation passed.
private Task HandleSubmitAsync(bool isValid)
{
    return ValidationResult.InvokeAsync(isValid);
}

private void HandleAddExample()
{
    if (LabModel is not null)
    LabModel.AddExample();
}


private void HandleRemoveExample()
{
    if (LabModel is not null)
    LabModel.RemoveExample();
}

}
