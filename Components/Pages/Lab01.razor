@page "/lab01"
@rendermode InteractiveServer
@using AI050LabAlternate.Labs.Lab01

@inject NavigationManager Navigation
@inject EditSuccess EditSuccessState
@inject OpenAIClient OpenAIClient
@inject OpenAIConfig OpenAIConfig

@if (LabModel is not null)
        {

<Lab01Form Busy="@Busy"
           LabModel="@LabModel"
           ValidationResult="@(async (success) => await ValidationResultAsync(success))"
           ViewCode="@(async (success) => await ViewCode())" />
        }
@if (Success)
        {
<br />
<div class="alert alert-success">The API was Called was successfully.</div>
        }
@if (Error)
        {
<br />
<div class="alert alert-danger">Failed call the api (@ErrorMessage).</div>
        }

@code {
    private Lab01Model? LabModel { get; set; }



    // True when an asynchronous operation is running.
    private bool Busy;

    // True after successful add.
    private bool Success;

    // True when an error occurred.
    private bool Error;

    private string ErrorMessage = string.Empty;

    // Start with fresh LabModel.
    protected override Task OnInitializedAsync()
    {
    LabModel = new();
    return base.OnInitializedAsync();
    }

    // Respond to a forms submission.
    // success is True when valid.
    private async Task ValidationResultAsync(bool success)
    {
    if (Busy)
    {
        return;
    }

    if (!success)
    {
        Success = false;
        Error = false;
        return;
    }

    Busy = true;
    var client = OpenAIClient ?? throw new NullReferenceException("OpenAIClient is null. Configuration or Dependency Injection has failed");
    if (LabModel is null)
    {
        throw new NullReferenceException("LabModel is null. Initialization of form has failed");
    }
    try
    {
        var messages = new List<ChatMessage>();
        if (!LabModel.IsAssistantHidden)
        {
            messages.Add(new ChatMessage(ChatRole.Assistant, LabModel.AssistantMessage));
            messages.Add(new ChatMessage(ChatRole.System, LabModel.UserMessage));
        }

        messages.Add(new ChatMessage(ChatRole.User, LabModel.QueryMessage));
        if (!string.IsNullOrEmpty(LabModel.SystemMessage))
        {
            messages.Add(new ChatMessage(ChatRole.System, LabModel.SystemMessage));
        }

        var options = new ChatCompletionsOptions(OpenAIConfig.DeploymentName, messages);
        options.Temperature = LabModel.Temperature ?? 0;
        options.MaxTokens = LabModel.MaxResponses;




        ChatCompletions response = await client.GetChatCompletionsAsync(options);
        if (response is null)
        {
            throw new NullReferenceException("Response is null. The API call has failed");
        }
        LabModel.ResponseMessage = response.Choices[0].Message.Content;
        success = true;

    }
    catch (Exception ex)
    {
        LabModel.ResponseMessage = ex.ToString();
        success = false;
    }
    Busy = false;

    }



    private async Task ViewCode()
    {
        if(LabModel is not null) LabModel.ResponseMessage = "View Code -- Not Implementd";
    }

}
