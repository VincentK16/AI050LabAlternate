@using Microsoft.AspNetCore.Components.Forms;
@using AI050LabAlternate.Components;


<h1>Lab 06 Emulator</h1>

This will only work if your instructor adds a datasource named 'margiestravel'.

<hr />


<EditForm Model="@LabModel"
          OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
          OnValidSubmit="(async () => await HandleSubmitAsync(true))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid form-group">
        <div class="row">

            <div class="col-6 d-flex flex-column align-col ">
                <h3>Asisstant Setup</h3>
                <div class="row mb-3">
                    <label>
                        System Message:
                        <InputTextArea @bind-Value="LabModel.SystemMessage" class="form-control" />

                    </label>
                </div>
                <div class="row">

                    <label>
                        Use Custom Data Source:<br/>
                        <InputRadioGroup Name="UseCustomDataSource" @bind-Value="@LabModel.UseCustomDataSource">
                            <InputRadio Name="UseCustomDataSource" Value="@true" />Yes<br>
                            <InputRadio Name="UseCustomDataSource" Value="@false" />No<br>
                        </InputRadioGroup>

                    </label>
                </div>


            </div>
            <div class="col-6 d-flex flex-column">
                <div class="row input-group mb-3">
                    <h3>Parameters</h3>
                    <label>
                        Temperature:
                        <InputNumber @bind-Value="LabModel.Temperature" class="form-control" />


                    </label>

                    <label>
                        MaxResponses:
                        <InputNumber @bind-Value="LabModel.MaxResponses" class="form-control" />


                    </label>
                </div>

                <h3>Chat Session</h3>
                <div class="row">
                    <label>
                        Query Message:
                        <InputTextArea @bind-Value="LabModel.QueryMessage" class="form-control" rows="7" />


                    </label>
                </div>


                <div class="d-flex justify-content-md-center">
                    <button type="submit" class="btn btn-primary" disabled="@Busy">Send</button>
                    <button type="reset" class="btn btn-primary">Clear Chat</button>
                </div>
            </div>


        </div>
        <div class="row">
            <div class="col-12">
                <h3>Response</h3>
                <div class="row">
                    <label>
                        Response Message:
                        <InputTextArea @bind-Value="LabModel.ResponseMessage" class="form-control" rows="7" />

                    </label>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {

// The Lab Model to upsert.
[Parameter]
public Lab06Model? LabModel { get; set; }

// Let parent handle result of validation.
[Parameter]
public EventCallback<bool> ValidationResult { get; set; }


[Parameter]
public EventCallback ViewCode { get; set; }


// Prevent multiple asynchronous operations at the same time.
[Parameter]
public bool Busy { get; set; }

private Task ViewCodeAsync()
{
    return ViewCode.InvokeAsync(null);
}


// Handle form submission request.
// isValid: True when field validation passed.
private Task HandleSubmitAsync(bool isValid)
{
    return ValidationResult.InvokeAsync(isValid);
}
}
