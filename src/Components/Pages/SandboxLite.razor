@page "/SandboxLite"
@rendermode InteractiveServer

@inject OpenAIClient OpenAIClient
@inject OpenAIConfig OpenAIConfig



@if (LabModel is not null && OpenAIConfig.OpenAIConfigured)
{

    <SandboxLiteForm Busy="@Busy"
               LabModel="@LabModel"
               ValidationResult="@(async (success) => await ValidationResultAsync(success))"
               SearchConfigured="@OpenAIConfig.SearchConfigured" />

}else
{
    <div class="alert alert-danger" role="alert">
        <h1>Configuration Error</h1>
        Azure Open API Settings cannot be found. This installation has not been completeted. Please see the README for further deployment instructions.
    </div>
}


@if (Success)
{
    <br />
    <div class="alert alert-success">The API was Called was successfully.</div>
}
@if (Error)
{
    <br />
    <div class="alert alert-danger">Failed call the api (@ErrorMessage).</div>
}

@code {

    private SandboxLiteModel? LabModel { get; set; }

    // True when an asynchronous operation is running.
    private bool Busy;

    // True after successful add.
    private bool Success;

    // True when an error occurred.
    private bool Error;

    private string ErrorMessage = string.Empty;

    // Start with fresh LabModel.
    protected override Task OnInitializedAsync()
    {
        LabModel = new();
        return base.OnInitializedAsync();
    }

    // Respond to a forms submission.
    // success is True when valid.
    private async Task ValidationResultAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            Success = false;
            Error = false;
            return;
        }

        Busy = true;
        var client = OpenAIClient ?? throw new NullReferenceException("OpenAIClient is null. Configuration or Dependency Injection has failed");
        if (LabModel is null)
        {
            throw new NullReferenceException("LabModel is null. Initialization of form has failed");
        }
        try
        {
            var messages = new List<ChatMessage>();

            foreach (var example in LabModel.Examples)
            {
                messages.Add(new ChatMessage(ChatRole.User, example.UserMessage));
                messages.Add(new ChatMessage(ChatRole.Assistant, example.AssistantMessage));
            }


            messages.Add(new ChatMessage(ChatRole.User, LabModel.QueryMessage));
            if (!string.IsNullOrEmpty(LabModel.SystemMessage))
            {
                messages.Add(new ChatMessage(ChatRole.System, LabModel.SystemMessage));
            }

            var options = new ChatCompletionsOptions(OpenAIConfig.DeploymentName, messages);
            options.Temperature = LabModel.Temperature ?? 0;
            options.MaxTokens = LabModel.MaxResponses;

            if (OpenAIConfig.SearchConfigured && LabModel.UseCustomDataSource)
            {
                var searchConfiguration = new AzureCognitiveSearchChatExtensionConfiguration()
                    {
                        SearchEndpoint = new(OpenAIConfig.SearchEndpoint),
                        IndexName = OpenAIConfig.SearchIndexName
                    };
                searchConfiguration.SetSearchKey(OpenAIConfig.SearchKey);
                var chatExtensions = new AzureChatExtensionsOptions();
                chatExtensions.Extensions.Add(searchConfiguration);
                options.AzureExtensionsOptions = chatExtensions;
            }
            else if (!OpenAIConfig.SearchConfigured && LabModel.UseCustomDataSource)
            {
                throw new InvalidOperationException("Search is not configured. Please configure search as describved in the README.MD");
            }


            ChatCompletions response = await client.GetChatCompletionsAsync(options);
            if (response is null)
            {
                Error = true;
                throw new NullReferenceException("Response is null. The API call has failed");

            }
            LabModel.ResponseMessage = response.Choices[0].Message.Content;
            Success = true;

        }
        catch (Exception ex)
        {
            LabModel.ResponseMessage = ex.ToString();
            Error = true;
            Success = false;
        }
        Busy = false;

    }



    private async Task ViewCode()
    {
        if (LabModel is not null) LabModel.ResponseMessage = "View Code -- Not Implementd";
    }

}
